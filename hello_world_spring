1. create a new empty web project using the curl and unzip commands:

curl https://start.spring.io/starter.zip \
    -d dependencies=web \
    -d name=helloworld \
    -d artifactId=helloworld \
    -o helloworld.zip
unzip helloworld.zip


2. 

Update the SpringBootApplication class in src/main/java/com/example/helloworld/HelloworldApplication.java by adding a @RestController to handle the “/” mapping and also add a @Value field to provide the TARGET environment variable:

package com.example.helloworld;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class HelloworldApplication {

  @Value("${TARGET:World}")
  String target;

  @RestController
  class HelloworldController {
    @GetMapping("/")
    String hello() {
      return "Hello " + target + "!";
    }
  }

  public static void main(String[] args) {
    SpringApplication.run(HelloworldApplication.class, args);
  }
}

Run the application locally:

./mvnw package && java -jar target/helloworld-0.0.1-SNAPSHOT.jar

Go to http://localhost:8080/ to see your Hello World! message.

In your project directory, create a file named Dockerfile and copy the code block below into it. For detailed instructions on dockerizing a Spring Boot app, see Spring Boot with Docker. For additional information on multi-stage docker builds for Java see Creating Smaller Java Image using Docker Multi-stage Build.

# Use the official maven/Java 8 image to create a build artifact.
# https://hub.docker.com/_/maven
FROM maven:3.5-jdk-8-alpine as builder

# Copy local code to the container image.
WORKDIR /app
COPY pom.xml .
COPY src ./src

# Build a release artifact.
RUN mvn package -DskipTests

# Use AdoptOpenJDK for base image.
# It's important to use OpenJDK 8u191 or above that has container support enabled.
# https://hub.docker.com/r/adoptopenjdk/openjdk8
# https://docs.docker.com/develop/develop-images/multistage-build/#use-multi-stage-builds
FROM adoptopenjdk/openjdk8:jdk8u202-b08-alpine-slim

# Copy the jar to the production image from the builder stage.
COPY --from=builder /app/target/helloworld-*.jar /helloworld.jar

# Run the web service on container startup.
CMD ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/helloworld.jar"]

Create a new file, service.yaml and copy the following service definition into the file. Make sure to replace {username} with your Docker Hub username.

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: helloworld-java-spring
  namespace: default
spec:
  template:
    spec:
      containers:
        - image: docker.io/{username}/helloworld-java-spring
          env:
            - name: TARGET
              value: "Spring Boot Sample v1"

Building and deploying the sample 


    Use Docker to build the sample code into a container. To build and push with Docker Hub, run these commands replacing {username} with your Docker Hub username:

    # Build the container on your local machine
    docker build -t {username}/helloworld-java-spring .

    # Push the container to docker registry
    docker push {username}/helloworld-java-spring

    After the build has completed and the container is pushed to docker hub, you can deploy the app into your cluster. Ensure that the container image value in service.yaml matches the container you built in the previous step. Apply the configuration using kubectl:

    kubectl apply --filename service.yaml

    Now that your service is created, Knative will perform the following steps:
        Create a new immutable revision for this version of the app.
        Network programming to create a route, ingress, service, and load balancer for your app.
        Automatically scale your pods up and down (including to zero active pods).

    To find the URL of your service, use:

    kubectl get ksvc helloworld-java-spring \
       --output=custom-columns=NAME:.metadata.name,URL:.status.url

    NAME                       URL
    helloworld-java-spring     http://helloworld-java-spring.default.1.2.3.4.xip.io

    Now you can make a request to your app and see the result. Replace the URL below with the URL returned in the previous command.

    curl http://helloworld-java-spring.default.1.2.3.4.xip.io
    Hello Spring Boot Sample v1!



